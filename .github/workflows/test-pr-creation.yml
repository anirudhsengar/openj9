name: Test PR Creation to aqa-triage-data

on:
  issue_comment:
    types: [created]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  test-pr-creation:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, 'GlitchWitcher')

    steps:
      - name: Parse GlitchWitcher Command
        id: parse-command
        run: |
          comment_body="${{ github.event.comment.body }}"
          echo "Full comment: $comment_body"

          # Extract PR link if provided
          pr_link=""
          if echo "$comment_body" | grep -oE 'GlitchWitcher\s+https://github\.com/[^/]+/[^/]+/pull/[0-9]+'; then
            pr_link=$(echo "$comment_body" | grep -oE 'https://github\.com/[^/]+/[^/]+/pull/[0-9]+')
            echo "PR link provided: $pr_link"
          elif echo "$comment_body" | grep -oE 'GlitchWitcher\s*$'; then
            # No PR link provided, use current PR if comment is on a PR
            if [ "${{ github.event.issue.pull_request.url }}" != "" ]; then
              pr_link="${{ github.event.issue.pull_request.html_url }}"
              echo "Using current PR: $pr_link"
            else
              echo "ERROR: GlitchWitcher called on issue without PR link"
              exit 1
            fi
          else
            echo "ERROR: Invalid GlitchWitcher command format"
            exit 1
          fi

          # Extract repository info from PR link
          if [[ "$pr_link" =~ https://github\.com/([^/]+)/([^/]+)/pull/([0-9]+) ]]; then
            repo_owner="${BASH_REMATCH[1]}"
            repo_name="${BASH_REMATCH[2]}"
            pr_number="${BASH_REMATCH[3]}"
            full_repo_name="${repo_owner}-${repo_name}"
            
            echo "repo_owner=$repo_owner" >> $GITHUB_OUTPUT
            echo "repo_name=$repo_name" >> $GITHUB_OUTPUT
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            echo "full_repo_name=$full_repo_name" >> $GITHUB_OUTPUT
            echo "pr_link=$pr_link" >> $GITHUB_OUTPUT
          else
            echo "ERROR: Could not parse repository info from PR link: $pr_link"
            exit 1
          fi

      - name: Create Test Files
        run: |
          echo "Creating test files for PR creation..."
          mkdir -p test_data
          echo "# Test Dataset for ${{ steps.parse-command.outputs.full_repo_name }}" > test_data/test_dataset.csv
          echo "File,loc,v(g),ev(g)" >> test_data/test_dataset.csv
          echo "test.c,100,5,3" >> test_data/test_dataset.csv
          
          mkdir -p test_data/trained_model
          echo '{"model_type": "test", "created": "'$(date)'"}' > test_data/trained_model/metadata.json
          echo "Test model data" > test_data/trained_model/model.pkl

      - name: Test PR Creation to aqa-triage-data
        run: |
          echo "Testing PR creation to anirudhsengar/aqa-triage-data..."

          # Clone the aqa-triage-data repository using PAT
          git clone https://${{ secrets.TRIAGE_PAT }}:x-oauth-basic@github.com/anirudhsengar/aqa-triage-data.git
          cd aqa-triage-data

          # Configure git
          git config user.name "GlitchWitcher Test Bot"
          git config user.email "glitchwicher-test-bot@adoptium.net"

          # Create target directory
          target_dir="GlitchWitcher/Traditional Dataset/TEST-${{ steps.parse-command.outputs.full_repo_name }}"
          mkdir -p "$target_dir"

          # Copy test files to target directory
          echo "Copying test files..."
          cp "../test_data/test_dataset.csv" "$target_dir/TEST-${{ steps.parse-command.outputs.full_repo_name }}.csv"
          cp -r "../test_data/trained_model" "$target_dir/"

          # Create branch and commit
          branch_name="test-dataset-${{ steps.parse-command.outputs.full_repo_name }}-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$branch_name"
          git add .
          git commit -m "TEST: Add dataset and trained model for ${{ steps.parse-command.outputs.full_repo_name }}"

          # Push branch using PAT
          git push https://${{ secrets.TRIAGE_PAT }}:x-oauth-basic@github.com/anirudhsengar/aqa-triage-data.git "$branch_name"

          # Create PR using GitHub API
          cat > pr_body.md << EOF
          # GlitchWitcher TEST Dataset Addition

          **‚ö†Ô∏è THIS IS A TEST PR - PLEASE DELETE AFTER VERIFICATION ‚ö†Ô∏è**

          This PR tests the dataset addition functionality for repository: **${{ steps.parse-command.outputs.repo_owner }}/${{ steps.parse-command.outputs.repo_name }}**

          ## Test Contents:
          - Test Dataset CSV file: \`TEST-${{ steps.parse-command.outputs.full_repo_name }}.csv\`
          - Test Trained model directory: \`trained_model/\`

          ## Triggered by:
          - Comment in: ${{ github.event.issue.html_url }}
          - Target PR: ${{ steps.parse-command.outputs.pr_link }}

          This PR was automatically generated by the GlitchWitcher TEST workflow.
          
          **Please delete this PR and its associated files after verification.**
          EOF

          # Create PR with GitHub API
          PR_RESPONSE=$(curl -X POST \
            -H "Authorization: token ${{ secrets.TRIAGE_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/anirudhsengar/aqa-triage-data/pulls \
            -d '{
              "title": "TEST: Add GlitchWitcher dataset for ${{ steps.parse-command.outputs.full_repo_name }}",
              "head": "'$branch_name'",
              "base": "main",
              "body": "'"$(cat pr_body.md | sed 's/"/\\"/g' | tr '\n' ' ')"'",
              "draft": true
            }')

          # Extract PR number
          PR_NUMBER=$(echo "$PR_RESPONSE" | grep -o '"number":[0-9]*' | head -1 | cut -d':' -f2)
          PR_URL=$(echo "$PR_RESPONSE" | grep -o '"html_url":"[^"]*"' | head -1 | sed 's/"html_url":"\([^"]*\)"/\1/')
          
          if [ ! -z "$PR_NUMBER" ]; then
            echo "‚úÖ Successfully created TEST PR #$PR_NUMBER"
            echo "PR URL: $PR_URL"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_ENV
            echo "pr_url=$PR_URL" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to create PR"
            echo "Response: $PR_RESPONSE"
            exit 1
          fi

      - name: Comment Test Results
        uses: actions/github-script@v6
        env:
          PR_LINK: "${{ steps.parse-command.outputs.pr_link }}"
          REPO_NAME: "${{ steps.parse-command.outputs.full_repo_name }}"
          TEST_PR_URL: "${{ env.pr_url }}"
          TEST_PR_NUMBER: "${{ env.pr_number }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = `## üß™ GlitchWitcher PR Creation Test Results

            **Target PR:** ${process.env.PR_LINK}
            **Repository:** ${process.env.REPO_NAME}

            ### ‚úÖ Test Status: SUCCESS
            
            **Test PR Created:** ${process.env.TEST_PR_URL}
            **PR Number:** #${process.env.TEST_PR_NUMBER}
            
            ### üìã Test Summary:
            - ‚úÖ Successfully parsed GlitchWitcher command
            - ‚úÖ Successfully cloned aqa-triage-data repository
            - ‚úÖ Successfully created test files
            - ‚úÖ Successfully created and pushed branch
            - ‚úÖ Successfully created draft PR via GitHub API
            
            ### ‚ö†Ô∏è Next Steps:
            Please manually verify the test PR and delete it after verification.
            
            *Test performed by GlitchWitcher Test Bot*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
